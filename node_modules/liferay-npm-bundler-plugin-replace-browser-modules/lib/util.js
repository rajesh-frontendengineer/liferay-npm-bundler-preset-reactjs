"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unrollAliasesMap = exports.moduleExists = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const alias_1 = require("liferay-npm-build-tools-common/lib/alias");
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
function moduleExists(absFilePath) {
    try {
        return fs_extra_1.default.statSync(absFilePath.toString()).isFile();
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            return false;
        }
        throw err;
    }
}
exports.moduleExists = moduleExists;
function unrollAliasesMap(aliasesMap) {
    const unrolledAliasesMap = {};
    Object.entries(aliasesMap).forEach(([absDirPosixPath, aliasHash]) => {
        const absDir = new file_path_1.default(absDirPosixPath, { posix: true });
        Object.entries(aliasHash).forEach(([from, to]) => {
            let absFrom = absDir.join(new file_path_1.default(from, { posix: true }));
            if (!absFrom.asNative.toLowerCase().endsWith('.js')) {
                absFrom = new file_path_1.default(`${absFrom.asNative}.js`);
            }
            unrolledAliasesMap[absFrom.asPosix] =
                unrolledAliasesMap[absFrom.asPosix] || [];
            unrolledAliasesMap[absFrom.asPosix].push({
                absDir,
                to,
                fromType: alias_1.getAliasFromType(from),
                from,
            });
        });
    });
    return unrolledAliasesMap;
}
exports.unrollAliasesMap = unrollAliasesMap;

{"version":3,"sources":["../src/index.js"],"names":["log","pkg","pkgJson","browser","unpkg","jsdelivr","replaceMainModule","dir","replaceModules","info","pkgs","pkgDir","pkgId","name","version","main","srcPath","join","resolveModuleFile","asNative","destPath","replaceFile","Object","keys","forEach","toModuleName","fromModuleName","ignoreFile","srcName","destName","srcModuleName","replace","destModuleName","contents","fs","readFileSync","toString","err","code","mkdirsSync","path","dirname","writeFileSync","filePath","moduleName"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport fs from 'fs-extra';\nimport * as pkgs from 'liferay-npm-build-tools-common/lib/packages';\nimport path from 'path';\n\n/**\n * @return {void}\n */\nexport default function({log, pkg}, {pkgJson}) {\n\tconst browser = pkgJson.browser || pkgJson.unpkg || pkgJson.jsdelivr;\n\n\tif (typeof browser === 'string') {\n\t\treplaceMainModule(pkg.dir, browser, pkgJson, log);\n\t} else if (browser) {\n\t\treplaceModules(pkg.dir, browser, pkgJson, log);\n\t} else {\n\t\tlog.info('replace-browser-modules', 'No browser modules found');\n\t}\n}\n\n/**\n * Copy \"browser\"/\"module\" module file on top of \"main\" module file.\n * @param {FilePath} pkgDir directory where package is placed\n * @param {String} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceMainModule(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\tconst main = pkgJson.main || 'index.js';\n\n\tconst srcPath = pkgDir.join(\n\t\tpkgs.resolveModuleFile(pkgDir.asNative, browser)\n\t).asNative;\n\n\tconst destPath = pkgDir.join(pkgs.resolveModuleFile(pkgDir.asNative, main))\n\t\t.asNative;\n\n\treplaceFile(pkgId, srcPath, browser, destPath, main, log);\n}\n\n/**\n * Copy \"browser\"/\"module\" module files on top of their server versions.\n * @param {FilePath} pkgDir directory where package is placed\n * @param {Object} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceModules(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\n\tObject.keys(browser).forEach(fromModuleName => {\n\t\tconst toModuleName = browser[fromModuleName];\n\n\t\tconst destPath = pkgDir.join(\n\t\t\tpkgs.resolveModuleFile(pkgDir.asNative, fromModuleName)\n\t\t).asNative;\n\n\t\tif (toModuleName == false) {\n\t\t\tignoreFile(destPath, fromModuleName, log);\n\t\t} else {\n\t\t\tconst srcPath = pkgDir.join(\n\t\t\t\tpkgs.resolveModuleFile(pkgDir.asNative, toModuleName)\n\t\t\t).asNative;\n\n\t\t\treplaceFile(\n\t\t\t\tpkgId,\n\t\t\t\tsrcPath,\n\t\t\t\ttoModuleName,\n\t\t\t\tdestPath,\n\t\t\t\tfromModuleName,\n\t\t\t\tlog\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Replace one package file with another.\n * @param {String} pkgId package id (name@version)\n * @param {String} srcPath path to source file\n * @param {String} srcName the name of the source file\n * @param {String} destPath path to destination file\n * @param {String} destName the name of the destination file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceFile(pkgId, srcPath, srcName, destPath, destName, log) {\n\tconst srcModuleName = srcName.replace('.js', '');\n\tconst destModuleName = destName.replace('.js', '');\n\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Replacing module ${destName} with module ${srcName}`\n\t);\n\n\ttry {\n\t\tlet contents = '';\n\n\t\ttry {\n\t\t\tcontents = fs.readFileSync(srcPath).toString();\n\t\t} catch (err) {\n\t\t\tif (err.code !== 'ENOENT') {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\n\t\tcontents = contents.replace(\n\t\t\t`'${pkgId}/${srcModuleName}'`,\n\t\t\t`'${pkgId}/${destModuleName}'`\n\t\t);\n\n\t\tfs.mkdirsSync(path.dirname(destPath));\n\n\t\tfs.writeFileSync(\n\t\t\tdestPath,\n\t\t\t'/* Module replaced with ' +\n\t\t\t\tsrcName +\n\t\t\t\t' by liferay-npm-bundler-plugin-replace-browser-modules */\\n' +\n\t\t\t\tcontents\n\t\t);\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Ignores one package\n * @param {String} filePath path to file to be ignored\n * @param {String} moduleName the name of the file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction ignoreFile(filePath, moduleName, log) {\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Emptying module ${moduleName} because it is server-only`\n\t);\n\n\tfs.mkdirsSync(path.dirname(filePath));\n\n\tfs.writeFileSync(\n\t\tfilePath,\n\t\t'/* Module ignored by ' +\n\t\t\t'liferay-npm-bundler-plugin-replace-browser-modules */\\n'\n\t);\n}\n"]}
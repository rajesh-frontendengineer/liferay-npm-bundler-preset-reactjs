'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (_ref) {
	var t = _ref.types;

	return {
		visitor: {
			Identifier: {
				exit: function exit(path, state) {
					maybeAddEsModuleFlagCase2(t, path, state);
				}
			},
			StringLiteral: {
				exit: function exit(path, state) {
					maybeAddEsModuleFlagCase1(t, path, state);
				}
			}
		}
	};
};

var _babelIpc = require('liferay-npm-build-tools-common/lib/babel-ipc');

var babelIpc = _interopRequireWildcard(_babelIpc);

var _packages = require('liferay-npm-build-tools-common/lib/packages');

var pkgs = _interopRequireWildcard(_packages);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Add `esModule` flag when `__esModule` is being assigned true through
 * `Object.defineProperty()`.
 * @param {object} t
 * @param {object} path
 * @param {object} state
 * @return {boolean} true if `esModule` flag has been added
 */
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

function maybeAddEsModuleFlagCase1(t, path, state) {
	var node = path.node;


	if (node.value !== '__esModule') {
		return false;
	}

	var parent = path.parent;


	if (!t.isCallExpression(parent)) {
		return false;
	}

	var callee = parent.callee;


	if (!t.isMemberExpression(callee) || !t.isIdentifier(callee.object) || callee.object.name !== 'Object' || !t.isIdentifier(callee.property) || callee.property.name !== 'defineProperty') {
		return false;
	}

	var args = parent.arguments;

	if (args.length != 3) {
		return false;
	}

	if (!t.isIdentifier(args[0]) || args[0].name !== 'exports' || !t.isStringLiteral(args[1]) || args[1].value !== '__esModule' || !t.isObjectExpression(args[2])) {
		return false;
	}

	addEsModuleFlag(state);

	return true;
}

/**
 * Add `esModule` flag when `__esModule` is being assigned true through
 * `module.exports` or `exports`.
 * @param {object} t
 * @param {object} path
 * @param {object} state
 * @return {boolean} true if `esModule` flag has been added
 */


/**
 * @return {object} a babel visitor
 */
function maybeAddEsModuleFlagCase2(t, path, state) {
	var node = path.node;


	if (node.name !== '__esModule') {
		return false;
	}

	var parent = path.parent;


	if (!t.isMemberExpression(parent) || !parent.object === 'exports') {
		return false;
	}

	addEsModuleFlag(state);

	return true;
}

/**
 * Add `esModule` flag to current JS module.
 * @param {object} state
 */
function addEsModuleFlag(state) {
	if (state.esModuleFlagAdded) {
		return;
	}

	var filenameRelative = state.file.opts.filenameRelative;

	var filenameAbsolute = _path2.default.resolve(filenameRelative);
	var pkgDir = pkgs.getPackageDir(filenameRelative);
	var pkgJson = (0, _readJsonSync2.default)(_path2.default.join(pkgDir, 'package.json'));

	var _babelIpc$get = babelIpc.get(state),
	    rootPkgJson = _babelIpc$get.rootPkgJson;

	var pkgId = pkgJson.name === rootPkgJson.name ? '/' : pkgJson.name + '@' + pkgJson.version;

	var _babelIpc$get2 = babelIpc.get(state),
	    manifest = _babelIpc$get2.manifest;

	manifest.addModuleFlags(pkgId, _path2.default.relative(pkgDir, filenameAbsolute), {
		esModule: true
	});

	state.esModuleFlagAdded = true;

	var _babelIpc$get3 = babelIpc.get(state, function () {
		return {
			log: new _pluginLogger2.default()
		};
	}),
	    log = _babelIpc$get3.log;

	log.info('add-module-metadata', "Added 'esModule' flag");
}
//# sourceMappingURL=index.js.map
"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const babelIpc = __importStar(require("liferay-npm-build-tools-common/lib/babel-ipc"));
const babelUtil = __importStar(require("liferay-npm-build-tools-common/lib/babel-util"));
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
const plugin_logger_1 = __importDefault(require("liferay-npm-build-tools-common/lib/plugin-logger"));
const path_1 = __importDefault(require("path"));
const read_json_sync_1 = __importDefault(require("read-json-sync"));
/**
 * @return {object} a babel visitor
 */
function default_1({ types: t }) {
    return {
        visitor: {
            Identifier: {
                exit(path, state) {
                    maybeAddEsModuleFlagCase2(t, path, state);
                },
            },
            StringLiteral: {
                exit(path, state) {
                    maybeAddEsModuleFlagCase1(t, path, state);
                },
            },
        },
    };
}
exports.default = default_1;
/**
 * Add `esModule` flag when `__esModule` is being assigned true through
 * `Object.defineProperty()`.
 * @param {object} t
 * @param {object} path
 * @param {object} state
 * @return {boolean} true if `esModule` flag has been added
 */
function maybeAddEsModuleFlagCase1(t, path, state) {
    const { node } = path;
    if (node.value !== '__esModule') {
        return false;
    }
    const { parent } = path;
    if (!t.isCallExpression(parent)) {
        return false;
    }
    const { callee } = parent;
    if (!t.isMemberExpression(callee) ||
        !t.isIdentifier(callee.object) ||
        callee.object.name !== 'Object' ||
        !t.isIdentifier(callee.property) ||
        callee.property.name !== 'defineProperty') {
        return false;
    }
    const args = parent.arguments;
    if (args.length !== 3) {
        return false;
    }
    if (!t.isIdentifier(args[0]) ||
        args[0].name !== 'exports' ||
        !t.isStringLiteral(args[1]) ||
        args[1].value !== '__esModule' ||
        !t.isObjectExpression(args[2])) {
        return false;
    }
    addEsModuleFlag(state);
    return true;
}
/**
 * Add `esModule` flag when `__esModule` is being assigned true through
 * `module.exports` or `exports`.
 * @param {object} t
 * @param {object} path
 * @param {object} state
 * @return {boolean} true if `esModule` flag has been added
 */
function maybeAddEsModuleFlagCase2(t, path, state) {
    const { node } = path;
    if (node.name !== '__esModule') {
        return false;
    }
    const { parent } = path;
    if (!t.isMemberExpression(parent) || !parent.object === 'exports') {
        return false;
    }
    addEsModuleFlag(state);
    return true;
}
/**
 * Add `esModule` flag to current JS module.
 * @param {object} state
 */
function addEsModuleFlag(state) {
    if (state.esModuleFlagAdded) {
        return;
    }
    const { filename } = state.file.opts;
    const pkgDir = babelUtil.getPackageDir(filename);
    const pkgJson = read_json_sync_1.default(path_1.default.join(pkgDir, 'package.json'));
    const { rootPkgJson } = babelIpc.get(state);
    const pkgId = pkgJson.name === rootPkgJson.name
        ? '/'
        : `${pkgJson.name}@${pkgJson.version}`;
    const { manifest } = babelIpc.get(state);
    manifest.addModuleFlags(pkgId, new file_path_1.default(path_1.default.relative(pkgDir, filename)).asPosix, {
        esModule: true,
    });
    state.esModuleFlagAdded = true;
    const { log } = babelIpc.get(state, () => ({
        log: new plugin_logger_1.default(),
    }));
    log.info('add-module-metadata', "Added 'esModule' flag");
}

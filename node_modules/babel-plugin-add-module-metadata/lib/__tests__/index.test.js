'use strict';

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _babelIpc = require('liferay-npm-build-tools-common/lib/babel-ipc');

var babelIpc = _interopRequireWildcard(_babelIpc);

var _manifest = require('liferay-npm-build-tools-common/lib/manifest');

var _manifest2 = _interopRequireDefault(_manifest);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _pkgDesc = require('liferay-npm-build-tools-common/lib/pkg-desc');

var _pkgDesc2 = _interopRequireDefault(_pkgDesc);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var pkgJson = require(_path2.default.join(__dirname, '../../package.json')); /**
                                                                              * Â© 2017 Liferay, Inc. <https://liferay.com>
                                                                              *
                                                                              * SPDX-License-Identifier: LGPL-3.0-or-later
                                                                              */

var pkgDesc = new _pkgDesc2.default(pkgJson.name, pkgJson.version, null);

var logger = void 0,
    manifest = void 0;

beforeEach(function () {
	babelIpc.set(__filename, {
		log: logger = new _pluginLogger2.default(),
		manifest: manifest = new _manifest2.default(),
		rootPkgJson: pkgJson
	});
});

describe('esModule flag', function () {
	var case1Source = '\n\tObject.defineProperty(exports, "__esModule", {\n\t\tvalue: true\n\t  });\n\n\tvar x = require(\'./x\');\n\tconsole.log(\'x is\', x);\n\tmodule.exports = \'Here is x: \' + x;\n\t';
	var case2Source = '\n\tObject.defineProperty(exports, "__esModule", {\n\t\tvalue: true\n\t  });\n\n\tvar x = require(\'./x\');\n\tconsole.log(\'x is\', x);\n\tmodule.exports = \'Here is x: \' + x;\n\t';

	it('is added in case 1', function () {
		var source = case1Source;

		babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		});

		var pkg = manifest.getPackage(pkgDesc);

		var flags = pkg.modules['src/__tests__/index.test.js'].flags;


		expect(flags.esModule).toBe(true);
	});

	it('is added in case 2', function () {
		var source = '\n\t\tmodule.exports.__esModule = true;\n\n\t\tvar x = require(\'./x\');\n\t\tconsole.log(\'x is\', x);\n\t\tmodule.exports = \'Here is x: \' + x;\n\t\t';

		babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		});

		var pkg = manifest.getPackage(pkgDesc);

		var flags = pkg.modules['src/__tests__/index.test.js'].flags;


		expect(flags.esModule).toBe(true);
	});

	it('logs results correctly in case 1', function () {
		var source = case1Source;

		babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		});

		expect(logger.messages).toMatchSnapshot();
	});

	it('logs results correctly in case 2', function () {
		var source = case2Source;

		babel.transform(source, {
			filenameRelative: __filename,
			plugins: [_index2.default]
		});

		expect(logger.messages).toMatchSnapshot();
	});
});
//# sourceMappingURL=index.test.js.map
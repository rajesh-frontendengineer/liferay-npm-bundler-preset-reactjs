'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (_ref) {
	var t = _ref.types;

	return {
		visitor: {
			Identifier: {
				exit: function exit(path, state) {
					var node = path.node;


					if (node.name == 'require') {
						var parent = path.parent;

						if (t.isCallExpression(parent)) {
							var argument = parent.arguments[0];

							if (t.isLiteral(argument) && argument.value) {
								var moduleName = argument.value;

								if (typeof moduleName === 'string' && !isPackageName(moduleName)) {
									if (moduleName.endsWith('.js')) {
										moduleName = moduleName.substring(0, moduleName.length - 3);
									}

									if (moduleName.endsWith('/')) {
										moduleName = moduleName.substring(0, moduleName.length - 1);
									}
								}

								if (!state.normalizeCount) {
									state.normalizeCount = 1;
								} else {
									state.normalizeCount++;
								}

								argument.value = moduleName;
							}
						}
					}
				}
			},
			Program: {
				exit: function exit(path, state) {
					if (state.normalizeCount) {
						var _babelIpc$get = babelIpc.get(state, function () {
							return {
								log: new _pluginLogger2.default()
							};
						}),
						    log = _babelIpc$get.log;

						log.info('normalize-requires', 'Normalized', state.normalizeCount, 'requires');
					}
				}
			}
		}
	};
};

var _babelIpc = require('liferay-npm-build-tools-common/lib/babel-ipc');

var babelIpc = _interopRequireWildcard(_babelIpc);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Check whether a module name refers to a package entry point.
 * @param {String} moduleName the name of a JS module
 * @return {boolean} true if moduleName is a package name
 */
function isPackageName(moduleName) {
	var firstSlashIndex = moduleName.indexOf('/');

	if (firstSlashIndex == -1) {
		return true;
	}

	var restOfModuleName = moduleName.substring(firstSlashIndex + 1);

	if (moduleName.startsWith('@') && restOfModuleName.indexOf('/') == -1) {
		return true;
	}

	return false;
}

/**
 * @return {object} a babel visitor
 */
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
//# sourceMappingURL=index.js.map
"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const babelIpc = __importStar(require("liferay-npm-build-tools-common/lib/babel-ipc"));
const plugin_logger_1 = __importDefault(require("liferay-npm-build-tools-common/lib/plugin-logger"));
/**
 * @return {object} a babel visitor
 */
function default_1({ types: t }) {
    return {
        visitor: {
            Identifier: {
                exit(path, state) {
                    const { node } = path;
                    if (node.name === 'require') {
                        const parent = path.parent;
                        if (t.isCallExpression(parent)) {
                            const argument = parent.arguments[0];
                            if (t.isLiteral(argument) && argument.value) {
                                let moduleName = argument.value;
                                if (typeof moduleName === 'string' &&
                                    !isPackageName(moduleName)) {
                                    if (moduleName.endsWith('.js')) {
                                        moduleName = moduleName.substring(0, moduleName.length - 3);
                                    }
                                    if (moduleName.endsWith('/')) {
                                        moduleName = moduleName.substring(0, moduleName.length - 1);
                                    }
                                }
                                if (!state.normalizeCount) {
                                    state.normalizeCount = 1;
                                }
                                else {
                                    state.normalizeCount++;
                                }
                                argument.value = moduleName;
                            }
                        }
                    }
                },
            },
            Program: {
                exit(path, state) {
                    if (state.normalizeCount) {
                        const { log } = babelIpc.get(state, () => ({
                            log: new plugin_logger_1.default(),
                        }));
                        log.info('normalize-requires', 'Normalized', state.normalizeCount, 'requires');
                    }
                },
            },
        },
    };
}
exports.default = default_1;
/**
 * Check whether a module name refers to a package entry point.
 * @param {String} moduleName the name of a JS module
 * @return {boolean} true if moduleName is a package name
 */
function isPackageName(moduleName) {
    const firstSlashIndex = moduleName.indexOf('/');
    if (firstSlashIndex === -1) {
        return true;
    }
    const restOfModuleName = moduleName.substring(firstSlashIndex + 1);
    if (moduleName.startsWith('@') && restOfModuleName.indexOf('/') === -1) {
        return true;
    }
    return false;
}

{"version":3,"sources":["../src/index.js"],"names":["extraNamespaceCount","firstDefineNamespaced","namespaceVisitor","Identifier","path","node","name","parent","type","property","key","scope","bindings","define","globals","namespace","opts","visitor","Program","exit","state","traverse","babelIpc","get","log","PluginLogger","info","warn"],"mappings":";;;;;;kBAce,YAAW;AACzB,KAAIA,4BAAJ;AACA,KAAIC,8BAAJ;;AAEA,KAAMC,mBAAmB;AACxBC,YADwB,sBACbC,IADa,EACP;AAChB,OAAIA,KAAKC,IAAL,CAAUC,IAAV,KAAmB,QAAvB,EAAiC;AAChC,QACCF,KAAKG,MAAL,CAAYC,IAAZ,KAAqB,kBAArB,IACAJ,KAAKG,MAAL,CAAYE,QAAZ,KAAyBL,KAAKC,IAF/B,EAGE;AACD;AACA;;AAED,QACCD,KAAKG,MAAL,CAAYC,IAAZ,KAAqB,gBAArB,IACAJ,KAAKG,MAAL,CAAYG,GAAZ,KAAoBN,KAAKC,IAF1B,EAGE;AACD;AACA;;AAED,QAAIM,cAAJ;;AAEA;AACA,SAAKA,QAAQP,KAAKO,KAAlB,EAAyBA,SAAS,IAAlC,EAAwCA,QAAQA,MAAMJ,MAAtD,EAA8D;AAC7D,SAAII,MAAMC,QAAN,CAAeC,MAAf,IAAyBF,MAAMG,OAAN,CAAcD,MAA3C,EAAmD;AAClD;AACA;AACD;;AAED,QACCF,SAAS,IAAT,IACCA,MAAMJ,MAAN,IAAgB,IAAhB,IAAwB,CAACI,MAAMC,QAAN,CAAeC,MAF1C,EAGE;AACD;AACA;AACA,SAAI,CAACZ,qBAAL,EAA4B;AAC3B;AACA,UAAMc,YACL,KAAKC,IAAL,CAAUD,SAAV,IAAuB,gBADxB;;AAGAX,WAAKC,IAAL,CAAUC,IAAV,GAAoBS,SAApB;;AAEAd,8BAAwB,IAAxB;AACA,MARD,MAQO;AACN;AACAD;AACA;AACD;AACD;AACD;AA9CuB,EAAzB;;AAiDA,QAAO;AACNiB,WAAS;AACRC,YAAS;AACRC,QADQ,gBACHf,IADG,EACGgB,KADH,EACU;AACjB;AACA;AACA;AACAnB,6BAAwB,KAAxB;AACAD,2BAAsB,CAAtB;;AAEAI,UAAKiB,QAAL,CAAcnB,gBAAd,EAAgC,EAACc,MAAMI,MAAMJ,IAAb,EAAhC;;AAEA,SAAIhB,sBAAsB,CAA1B,EAA6B;AAAA,0BACdsB,SAASC,GAAT,CAAaH,KAAb,EAAoB;AAAA,cAAO;AACxCI,aAAK,IAAIC,sBAAJ;AADmC,QAAP;AAAA,OAApB,CADc;AAAA,UACrBD,GADqB,iBACrBA,GADqB;;AAK5B,UAAIvB,qBAAJ,EAA2B;AAC1BuB,WAAIE,IAAJ,CACC,sBADD,EAEC,qCAFD;AAIA;;AAED,UAAI1B,mBAAJ,EAAyB;AACxBwB,WAAIG,IAAJ,CACC,sBADD,EAEC,OAFD,EAGC3B,mBAHD,EAIC,6CAJD,EAKC,8CALD,EAMC,4BAND;AAQA;AACD;AACD;AAjCO;AADD;AADH,EAAP;AAuCA,C;;AApGD;;IAAYsB,Q;;AACZ","file":"index.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as babelIpc from 'liferay-npm-build-tools-common/lib/babel-ipc';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\n\n/**\n * Valid babel plugin options are:\n *     namespace: 'Liferay.Loader'\n * @return {object} a babel visitor\n */\nexport default function() {\n\tlet extraNamespaceCount;\n\tlet firstDefineNamespaced;\n\n\tconst namespaceVisitor = {\n\t\tIdentifier(path) {\n\t\t\tif (path.node.name === 'define') {\n\t\t\t\tif (\n\t\t\t\t\tpath.parent.type === 'MemberExpression' &&\n\t\t\t\t\tpath.parent.property === path.node\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tpath.parent.type === 'ObjectProperty' &&\n\t\t\t\t\tpath.parent.key === path.node\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet scope;\n\n\t\t\t\t// Find if 'define' is defined in any scope\n\t\t\t\tfor (scope = path.scope; scope != null; scope = scope.parent) {\n\t\t\t\t\tif (scope.bindings.define || scope.globals.define) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tscope == null ||\n\t\t\t\t\t(scope.parent == null && !scope.bindings.define)\n\t\t\t\t) {\n\t\t\t\t\t// If 'define' is not defined in any scope namespace or\n\t\t\t\t\t// defined in the root scope as global...\n\t\t\t\t\tif (!firstDefineNamespaced) {\n\t\t\t\t\t\t// ...and it's its first appearance, namespace it\n\t\t\t\t\t\tconst namespace =\n\t\t\t\t\t\t\tthis.opts.namespace || 'Liferay.Loader';\n\n\t\t\t\t\t\tpath.node.name = `${namespace}.define`;\n\n\t\t\t\t\t\tfirstDefineNamespaced = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ...and appeared before, record a new extra appearance\n\t\t\t\t\t\textraNamespaceCount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\texit(path, state) {\n\t\t\t\t\t// We must traverse the AST again because the third party\n\t\t\t\t\t// transform-es2015-modules-amd emits its define() call after\n\t\t\t\t\t// Program exit :-(\n\t\t\t\t\tfirstDefineNamespaced = false;\n\t\t\t\t\textraNamespaceCount = 0;\n\n\t\t\t\t\tpath.traverse(namespaceVisitor, {opts: state.opts});\n\n\t\t\t\t\tif (extraNamespaceCount > 0) {\n\t\t\t\t\t\tconst {log} = babelIpc.get(state, () => ({\n\t\t\t\t\t\t\tlog: new PluginLogger(),\n\t\t\t\t\t\t}));\n\n\t\t\t\t\t\tif (firstDefineNamespaced) {\n\t\t\t\t\t\t\tlog.info(\n\t\t\t\t\t\t\t\t'namespace-amd-define',\n\t\t\t\t\t\t\t\t'Namespaced first AMD define in file'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (extraNamespaceCount) {\n\t\t\t\t\t\t\tlog.warn(\n\t\t\t\t\t\t\t\t'namespace-amd-define',\n\t\t\t\t\t\t\t\t'Found',\n\t\t\t\t\t\t\t\textraNamespaceCount,\n\t\t\t\t\t\t\t\t'define() calls inside the module definition',\n\t\t\t\t\t\t\t\t'which have been ignored as they should never',\n\t\t\t\t\t\t\t\t'be executed during runtime'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n"]}
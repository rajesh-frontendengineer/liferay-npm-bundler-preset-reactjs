{"version":3,"sources":["../src/plugin-logger.js"],"names":["PluginLogger","_msgs","source","things","push","level","reduce","str","join","filter","msg","length"],"mappings":";;;;;;;;;;AAAA;;;;;;AAMA;;;;IAIqBA,Y;AACpB;;;AAGA,yBAAc;AAAA;;AACb,OAAKC,KAAL,GAAa,EAAb;AACA;;AAED;;;;;;;;;;uBAMKC,M,EAAmB;AAAA,qCAARC,MAAQ;AAARA,UAAQ;AAAA;;AACvB,QAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfF,kBADe;AAEfG,WAAO,MAFQ;AAGfF;AAHe,IAAhB;AAKA;;AAED;;;;;;;;;uBAMKD,M,EAAmB;AAAA,sCAARC,MAAQ;AAARA,UAAQ;AAAA;;AACvB,QAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfF,kBADe;AAEfG,WAAO,MAFQ;AAGfF;AAHe,IAAhB;AAKA;;AAED;;;;;;;;;wBAMMD,M,EAAmB;AAAA,sCAARC,MAAQ;AAARA,UAAQ;AAAA;;AACxB,QAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfF,kBADe;AAEfG,WAAO,OAFQ;AAGfF;AAHe,IAAhB;AAKA;;AAED;;;;;;;;;AAwBA;;;;6BAIW;AACV,UAAO,KAAKF,KAAL,CAAWK,MAAX,CACN,UAACC,GAAD;AAAA,QAAOF,KAAP,QAAOA,KAAP;AAAA,QAAcH,MAAd,QAAcA,MAAd;AAAA,QAAsBC,MAAtB,QAAsBA,MAAtB;AAAA,gBACII,GADJ,GACUL,MADV,SACoBG,KADpB,UAC8BF,OAAOK,IAAP,CAAY,GAAZ,CAD9B;AAAA,IADM,EAGN,EAHM,CAAP;AAKA;;AAED;;;;;;;2BAIS;AACR,UAAO,KAAKP,KAAL,CAAWK,MAAX,CACN,UAACC,GAAD;AAAA,QAAOF,KAAP,SAAOA,KAAP;AAAA,QAAcH,MAAd,SAAcA,MAAd;AAAA,QAAsBC,MAAtB,SAAsBA,MAAtB;AAAA,gBACII,GADJ,GACUL,MADV,SACoBG,KADpB,UAC8BF,OAAOK,IAAP,CAAY,GAAZ,CAD9B;AAAA,IADM,EAGN,EAHM,CAAP;AAKA;;;sBA1Cc;AACd,UAAO,KAAKP,KAAZ;AACA;;AAED;;;;;;;sBAImB;AAClB,UAAO,KAAKA,KAAL,CAAWQ,MAAX,CAAkB;AAAA,WAAOC,IAAIL,KAAJ,KAAc,MAArB;AAAA,IAAlB,EAA+CM,MAA/C,GAAwD,CAA/D;AACA;;AAED;;;;;;;sBAIoB;AACnB,UAAO,KAAKV,KAAL,CAAWQ,MAAX,CAAkB;AAAA,WAAOC,IAAIL,KAAJ,KAAc,OAArB;AAAA,IAAlB,EAAgDM,MAAhD,GAAyD,CAAhE;AACA;;;;;;kBAxEmBX,Y","file":"plugin-logger.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\n/**\n * An object to hold babel or liferay-npm-bundler plugin messages.\n * @type {PluginLogger}\n */\nexport default class PluginLogger {\n\t/**\n\t * Construct empty logger with no messages\n\t */\n\tconstructor() {\n\t\tthis._msgs = [];\n\t}\n\n\t/**\n\t * Log an informational message\n\t * @param {String} source the identifier for the source of the message\n\t * @param {Array} things the objects or strings to print\n\t * @return {void}\n\t */\n\tinfo(source, ...things) {\n\t\tthis._msgs.push({\n\t\t\tsource,\n\t\t\tlevel: 'info',\n\t\t\tthings,\n\t\t});\n\t}\n\n\t/**\n\t * Log a warn message\n\t * @param {String} source the identifier for the source of the message\n\t * @param {Array} things the objects or strings to print\n\t * @return {void}\n\t */\n\twarn(source, ...things) {\n\t\tthis._msgs.push({\n\t\t\tsource,\n\t\t\tlevel: 'warn',\n\t\t\tthings,\n\t\t});\n\t}\n\n\t/**\n\t * Log an error message\n\t * @param {String} source the identifier for the source of the message\n\t * @param {Array} things the objects or strings to print\n\t * @return {void}\n\t */\n\terror(source, ...things) {\n\t\tthis._msgs.push({\n\t\t\tsource,\n\t\t\tlevel: 'error',\n\t\t\tthings,\n\t\t});\n\t}\n\n\t/**\n\t * Get the list of messages\n\t * @return {Array} an array containing one object per messages (with fields: source, level and things)\n\t */\n\tget messages() {\n\t\treturn this._msgs;\n\t}\n\n\t/**\n\t * Test if there are warn messages.\n\t * @return {boolean} if at least one warn message is registered in the logger\n\t */\n\tget warnsPresent() {\n\t\treturn this._msgs.filter(msg => msg.level === 'warn').length > 0;\n\t}\n\n\t/**\n\t * Test if there are error messages.\n\t * @return {boolean} if at least one error message is registered in the logger\n\t */\n\tget errorsPresent() {\n\t\treturn this._msgs.filter(msg => msg.level === 'error').length > 0;\n\t}\n\n\t/**\n\t * Return a printable string representation of the messages logged till now\n\t * @return {String} a string containing one line per message\n\t */\n\ttoString() {\n\t\treturn this._msgs.reduce(\n\t\t\t(str, {level, source, things}) =>\n\t\t\t\t`${str}${source}:${level}: ${things.join(' ')}\\n`,\n\t\t\t''\n\t\t);\n\t}\n\n\t/**\n\t * Return an HTML string representation of the messages logged till now\n\t * @return {String} HTML containing one line (<br> separated) per message\n\t */\n\ttoHtml() {\n\t\treturn this._msgs.reduce(\n\t\t\t(str, {level, source, things}) =>\n\t\t\t\t`${str}${source}:${level}: ${things.join(' ')}<br>`,\n\t\t\t''\n\t\t);\n\t}\n}\n"]}
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


var _dotProp = require('dot-prop');

var _dotProp2 = _interopRequireDefault(_dotProp);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

var _filePath = require('../file-path');

var _filePath2 = _interopRequireDefault(_filePath);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Reflects JAR file configuration of JS Toolkit projects.
 */
var Jar = function () {
	/**
  *
  * @param {Project} project
  */
	function Jar(project) {
		_classCallCheck(this, Jar);

		this._project = project;

		this._customManifestHeaders = undefined;
		this._outputDir = undefined;
		this._outputFilename = undefined;
		this._webContextPath = undefined;
	}

	/**
  * Get user configured manifest headers
  */


	_createClass(Jar, [{
		key: 'customManifestHeaders',
		get: function get() {
			var _npmbundlerrc = this._project._npmbundlerrc;


			if (this._customManifestHeaders === undefined) {
				var manifestFilePath = (0, _util.getFeaturesFilePath)(this._project, 'create-jar.features.manifest', 'features/manifest.json');

				var featuresHeaders = manifestFilePath ? (0, _readJsonSync2.default)(manifestFilePath) : {};

				var npmbundlerrcHeaders = _dotProp2.default.get(_npmbundlerrc, 'create-jar.customManifestHeaders', {});

				this._customManifestHeaders = Object.assign(npmbundlerrcHeaders, featuresHeaders);
			}

			return this._customManifestHeaders;
		}

		/**
   * Get output directory for JAR file relative to `project.dir` and
   * starting with `./`
   * @return {FilePath}
   */

	}, {
		key: 'outputDir',
		get: function get() {
			var _project = this._project;
			var _npmbundlerrc = _project._npmbundlerrc;


			if (this._outputDir === undefined) {
				var outputDirPosixPath = _dotProp2.default.get(_npmbundlerrc, 'create-jar.output-dir', this.supported ? _project.buildDir.asPosix : undefined);

				if (outputDirPosixPath !== undefined) {
					if (!outputDirPosixPath.startsWith('./')) {
						outputDirPosixPath = './' + outputDirPosixPath;
					}

					this._outputDir = new _filePath2.default(outputDirPosixPath, {
						posix: true
					});
				}
			}

			return this._outputDir;
		}

		/**
   * Get filename of output JAR file
   */

	}, {
		key: 'outputFilename',
		get: function get() {
			var _project2 = this._project,
			    _npmbundlerrc = _project2._npmbundlerrc,
			    _pkgJson = _project2._pkgJson;


			if (this._outputFilename === undefined) {
				this._outputFilename = _dotProp2.default.get(_npmbundlerrc, 'create-jar.output-filename', this.supported ? _pkgJson.name + '-' + _pkgJson.version + '.jar' : undefined);
			}

			return this._outputFilename;
		}

		/**
   * @return {boolean}
   */

	}, {
		key: 'supported',
		get: function get() {
			var _npmbundlerrc = this._project._npmbundlerrc;


			return !!_dotProp2.default.get(_npmbundlerrc, 'create-jar', false);
		}
	}, {
		key: 'webContextPath',
		get: function get() {
			var _project3 = this._project,
			    _npmbundlerrc = _project3._npmbundlerrc,
			    _pkgJson = _project3._pkgJson;


			if (!this._webContextPath) {
				this._webContextPath = _dotProp2.default.get(_npmbundlerrc, 'create-jar.features.web-context',
				// TODO: deprecated 'web-context-path', remove for the next major version
				_dotProp2.default.get(_npmbundlerrc, 'create-jar.web-context-path',
				// TODO: deprecated 'osgi.Web-ContextPath', remove for the next major version
				_dotProp2.default.get(_pkgJson, 'osgi.Web-ContextPath', '/' + _pkgJson.name + '-' + _pkgJson.version)));
			}

			return this._webContextPath;
		}
	}]);

	return Jar;
}();

exports.default = Jar;
//# sourceMappingURL=jar.js.map
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

/**
 * Reflects project type (React, Angular, ...)
 */
var Probe = function () {
	/**
  *
  * @param {Project} project
  */
	function Probe(project) {
		_classCallCheck(this, Probe);

		this._project = project;
		this._pkgJson = project._pkgJson;

		this.TYPE_CREATE_REACT_APP = 'create-react-app';
	}

	/**
  * Return true if project is of type create-react-app
  * @return {string|undefined} the project type or undefined if nothing
  * 			detected
  */


	_createClass(Probe, [{
		key: 'type',
		get: function get() {
			var pkgJson = this._pkgJson;

			if (pkgJson.dependencies && (pkgJson.dependencies['react-scripts'] || pkgJson.devDependencies['react-scripts'])) {
				return this.TYPE_CREATE_REACT_APP;
			}

			return undefined;
		}
	}]);

	return Probe;
}();

exports.default = Probe;
//# sourceMappingURL=probe.js.map
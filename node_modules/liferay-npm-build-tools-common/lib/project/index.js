'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Project = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _dotProp = require('dot-prop');

var _dotProp2 = _interopRequireDefault(_dotProp);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _merge = require('merge');

var _merge2 = _interopRequireDefault(_merge);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _filePath = require('../file-path');

var _filePath2 = _interopRequireDefault(_filePath);

var _jar = require('./jar');

var _jar2 = _interopRequireDefault(_jar);

var _localization = require('./localization');

var _localization2 = _interopRequireDefault(_localization);

var _probe = require('./probe');

var _probe2 = _interopRequireDefault(_probe);

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Describes a standard JS Toolkit project.
 */
var Project = exports.Project = function () {
	/**
  * @param {string} projectDirPath project's path in native format
  */
	function Project(projectDirPath) {
		_classCallCheck(this, Project);

		this.loadFrom(projectDirPath);
	}

	/**
  * Get directories inside the project containing source files starting with
  * `./` (so that they can be safely path.joined)
  * @return {Array<FilePath>}
  */


	_createClass(Project, [{
		key: 'loadFrom',


		/**
   * Reload the whole project from given directory. Especially useful for
   * tests.
   * @param {string} projectDir project's path in native format (whether
   * 						absolute or relative to cwd)
   */
		value: function loadFrom(projectDir) {
			this._projectDir = new _filePath2.default(_path2.default.resolve(projectDir));

			this._loadPkgJson();
			this._loadNpmbundlerrc();

			this._sources = undefined;
			this._buildDir = undefined;
			this._pkgManager = undefined;

			this.jar = new _jar2.default(this);
			this.l10n = new _localization2.default(this);
			this.probe = new _probe2.default(this);
			this.rules = new _rules2.default(this);
		}

		/**
   * Return the package manager that the project is using.
   * @return {string} one of 'npm', 'yarn' or null if it cannot be determined
   */

	}, {
		key: 'require',


		/**
   * Requires a module in the context of the project (as opposed to the
   * context of the calling package which would just use a normal `require()`
   * call).
   * @param {string} moduleName
   */
		value: function (_require) {
			function require(_x) {
				return _require.apply(this, arguments);
			}

			require.toString = function () {
				return _require.toString();
			};

			return require;
		}(function (moduleName) {
			var modulePath = _resolve2.default.sync(moduleName, {
				basedir: this.dir.asNative
			});

			return require(modulePath);
		})
	}, {
		key: '_loadNpmbundlerrc',
		value: function _loadNpmbundlerrc() {
			var npmbundlerrcPath = this._projectDir.join('.npmbundlerrc').asNative;

			var config = _fs2.default.existsSync(npmbundlerrcPath) ? (0, _readJsonSync2.default)(npmbundlerrcPath) : {};

			// Apply preset if necessary
			var presetFilePath = void 0;

			if (config.preset === undefined) {
				presetFilePath = require.resolve('liferay-npm-bundler-preset-standard');
			} else if (config.preset === '' || config.preset === false) {
				// don't load preset
			} else {
				presetFilePath = _resolve2.default.sync(config.preset, {
					basedir: this.dir.asNative
				});
			}

			if (presetFilePath) {
				var originalConfig = Object.assign({}, config);

				Object.assign(config, _merge2.default.recursive((0, _readJsonSync2.default)(presetFilePath), originalConfig));
			}

			this._npmbundlerrc = config;
		}
	}, {
		key: '_loadPkgJson',
		value: function _loadPkgJson() {
			var pkgJsonPath = this.dir.join('package.json').asNative;

			this._pkgJson = _fs2.default.existsSync(pkgJsonPath) ? (0, _readJsonSync2.default)(pkgJsonPath) : {};
		}
	}, {
		key: 'sources',
		get: function get() {
			if (this._sources === undefined) {
				this._sources = _filePath2.default.convertArray(_dotProp2.default.get(this._npmbundlerrc, 'sources', []).map(function (source) {
					return source.startsWith('./') ? source : './' + source;
				}), { posix: true });
			}

			return this._sources;
		}

		/**
   * Get directory where files to be transformed live relative to
   * `this.dir` and starting with `./` (so that it can be safely path.joined)
   * @return {FilePath}
   */

	}, {
		key: 'buildDir',
		get: function get() {
			if (this._buildDir === undefined) {
				var dir = _dotProp2.default.get(this._npmbundlerrc, 'output', this.jar.supported ? './build' : './build/resources/main/META-INF/resources');

				if (!dir.startsWith('./')) {
					dir = './' + dir;
				}

				this._buildDir = new _filePath2.default(dir, { posix: true });
			}

			return this._buildDir;
		}

		/**
   * Get absolute path to project's directory.
   * @return {FilePath}
   */

	}, {
		key: 'dir',
		get: function get() {
			return this._projectDir;
		}

		/**
   * Get project's parsed package.json file
   */

	}, {
		key: 'pkgJson',
		get: function get() {
			return this._pkgJson;
		}
	}, {
		key: 'pkgManager',
		get: function get() {
			if (this._pkgManager === undefined) {
				var yarnLockPresent = _fs2.default.existsSync(this._projectDir.join('yarn.lock').asNative);
				var pkgLockPresent = _fs2.default.existsSync(this._projectDir.join('package-lock.json').asNative);

				// If both present act as if none was present
				if (yarnLockPresent && pkgLockPresent) {
					yarnLockPresent = pkgLockPresent = false;
				}

				if (yarnLockPresent) {
					this._pkgManager = 'yarn';
				} else if (pkgLockPresent) {
					this._pkgManager = 'npm';
				} else {
					// If no file is found autodetect command availability
					var yarnPresent = _child_process2.default.spawnSync('yarn', ['--version'], {
						shell: true
					}).error === undefined;
					var npmPresent = _child_process2.default.spawnSync('npm', ['--version'], {
						shell: true
					}).error === undefined;

					// If both present act as if none was present
					if (yarnPresent && npmPresent) {
						yarnPresent = npmPresent = false;
					}

					if (yarnPresent) {
						this._pkgManager = 'yarn';
					} else if (npmPresent) {
						this._pkgManager = 'npm';
					}
				}

				// If nothing detected store null
				if (this._pkgManager === undefined) {
					this._pkgManager = null;
				}
			}

			return this._pkgManager;
		}
	}]);

	return Project;
}();

exports.default = new Project('.');
//# sourceMappingURL=index.js.map
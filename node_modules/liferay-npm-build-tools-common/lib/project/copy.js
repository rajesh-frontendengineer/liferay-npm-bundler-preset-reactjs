"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dot_prop_1 = __importDefault(require("dot-prop"));
const util = __importStar(require("./util"));
/**
 * Defines configuration for the copy step.
 */
class Copy {
    constructor(project) {
        this._project = project;
    }
    /**
     * Extra dependencies to add to the final bundle (in addition to those
     * listed under the dependencies section of package.json).
     */
    get includedDependencies() {
        const { npmbundlerrc } = this._project;
        return dot_prop_1.default.get(npmbundlerrc, 'include-dependencies', []);
    }
    /**
     * Get the configured file exclusions for a given package.
     * @param pkg the package descriptor
     * @return an array of glob expressions (as defined by `globby`)
     */
    getExclusions(pkg) {
        const { npmbundlerrc } = this._project;
        let exclusions = npmbundlerrc['exclude'] || {};
        // If it is explicitly false, return an empty exclusions array
        if (exclusions[pkg.id] === false ||
            exclusions[pkg.name] === false ||
            exclusions['*'] === false) {
            return [];
        }
        // If it is explicitly true, return an array with '**/*'
        if (exclusions[pkg.id] === true ||
            exclusions[pkg.name] === true ||
            exclusions['*'] === true) {
            return ['**/*'];
        }
        // In any other case, return what's in the config
        exclusions =
            exclusions[pkg.id] || exclusions[pkg.name] || exclusions['*'] || [];
        return exclusions;
    }
    getPluginDescriptors(pkg) {
        const { _project } = this;
        const pkgConfig = util.getPackageConfig(_project, pkg, 'copy-plugins', []);
        return util.createBundlerPluginDescriptors(_project, pkgConfig);
    }
    /**
     * Filters out dependencies to bundle based on the global bundler config
     * @param dependencies array of dependency names
     * @return an array of dependency names
     */
    filterDependencies(dependencies) {
        const { globalConfig, pkgJson } = this._project;
        if (!(globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.strictGlobalDependencies)) {
            return dependencies;
        }
        if (!this._globalDependencyMap) {
            const dependencyMap = new Map();
            Object.entries(globalConfig === null || globalConfig === void 0 ? void 0 : globalConfig.imports).forEach(([pkgName, deps = {}]) => {
                dependencyMap.set(pkgName, pkgName);
                Object.keys(deps).forEach((dep) => {
                    dependencyMap.set(dep, pkgName);
                });
            });
            this._globalDependencyMap = dependencyMap;
        }
        return dependencies.filter((dependency) => !this._globalDependencyMap.has(dependency) ||
            (this._globalDependencyMap.has(dependency) &&
                this._globalDependencyMap.get(dependency) === pkgJson.name));
    }
}
exports.default = Copy;

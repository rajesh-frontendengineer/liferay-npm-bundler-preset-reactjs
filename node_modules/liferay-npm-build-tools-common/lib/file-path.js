'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FilePath = function () {
	function FilePath(nativePath) {
		var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
		    posix = _ref.posix;

		_classCallCheck(this, FilePath);

		if (posix && !FilePath.nativeIsPosix) {
			nativePath = nativePath.replace(/\//g, '\\');
		}

		this._nativePath = nativePath;

		if (FilePath.nativeIsPosix) {
			this._posixPath = nativePath;
			this._windowsPath = nativePath.replace(/\//g, '\\');
		} else {
			this._posixPath = nativePath.replace(/\\/g, '/');
			this._windowsPath = nativePath;
		}
	}

	_createClass(FilePath, [{
		key: 'toString',
		value: function toString() {
			return this.asNative;
		}
	}, {
		key: 'join',


		/**
   *
   * @param {...string|FilePath} nativePathFragments
   * @return {FilePath}
   */
		value: function join() {
			var join = FilePath.nativeIsPosix ? _path2.default.posix.join : _path2.default.win32.join;

			for (var _len = arguments.length, nativePathFragments = Array(_len), _key = 0; _key < _len; _key++) {
				nativePathFragments[_key] = arguments[_key];
			}

			return new FilePath(join.apply(undefined, [this.toString()].concat(_toConsumableArray(nativePathFragments.map(function (nativePathFragment) {
				return nativePathFragment.toString();
			})))));
		}

		/**
   *
   * @param {string|FilePath} nativePath
   * @return {FilePath}
   */

	}, {
		key: 'relative',
		value: function relative(nativePath) {
			return new FilePath(_path2.default.relative(this.asNative, nativePath.toString()));
		}
	}, {
		key: 'asNative',
		get: function get() {
			return this._nativePath;
		}
	}, {
		key: 'asPosix',
		get: function get() {
			return this._posixPath;
		}
	}, {
		key: 'asWindows',
		get: function get() {
			return this._windowsPath;
		}
	}]);

	return FilePath;
}();

exports.default = FilePath;


FilePath.nativeIsPosix = _path2.default.sep === '/';

FilePath.convertArray = function (nativePathsArray) {
	var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    posix = _ref2.posix;

	var filePathsArray = nativePathsArray.map(function (nativePath) {
		return new FilePath(nativePath, { posix: posix });
	});

	Object.defineProperty(filePathsArray, 'asNative', {
		configurable: false,
		enumerable: true,
		get: function get() {
			return filePathsArray.map(function (filePath) {
				return filePath.asNative;
			});
		}
	});

	Object.defineProperty(filePathsArray, 'asPosix', {
		configurable: false,
		enumerable: true,
		get: function get() {
			return filePathsArray.map(function (filePath) {
				return filePath.asPosix;
			});
		}
	});

	Object.defineProperty(filePathsArray, 'asWindows', {
		configurable: false,
		enumerable: true,
		get: function get() {
			return filePathsArray.map(function (filePath) {
				return filePath.asWindows;
			});
		}
	});

	return filePathsArray;
};
//# sourceMappingURL=file-path.js.map
{"version":3,"sources":["../src/namespace.js"],"names":["isNamespaced","addNamespace","removeNamespace","getNamespace","makeNamespace","mod","moduleName","name","allowOverride","moduleNamespace","namespace","Error","isLocalModule","startsWith","replace","substring","length","parts","split","includes"],"mappings":";;;;;QAagBA,Y,GAAAA,Y;QAaAC,Y,GAAAA,Y;QAmCAC,e,GAAAA,e;QAoBAC,Y,GAAAA,Y;QAmBAC,a,GAAAA,a;;AA9FhB;;IAAYC,G;;;;AAEZ;;;;;AAKO,SAASL,YAAT,CAAsBM,UAAtB,EAAkC;AACxC,QAAOH,aAAaG,UAAb,KAA4B,IAAnC;AACA;;AAED;;;;;;;;;AAjBA;;;;;;AA0BO,SAASL,YAAT,CAAsBK,UAAtB,QAAwE;AAAA,KAArCC,IAAqC,QAArCA,IAAqC;;AAAA,iFAAJ,EAAI;AAAA,iCAA7BC,aAA6B;AAAA,KAA7BA,aAA6B,uCAAb,KAAa;;AAC9E,KAAMC,kBAAkBN,aAAaG,UAAb,CAAxB;AACA,KAAMI,YAAYN,cAAc,EAACG,UAAD,EAAd,CAAlB;;AAEA,KAAIE,mBAAmB,IAAvB,EAA6B;AAC5B,MAAIA,oBAAoBC,SAAxB,EAAmC;AAClC,OAAI,CAACF,aAAL,EAAoB;AACnB,UAAM,IAAIG,KAAJ,CACL,mCAAiCF,eAAjC,gCACoBC,SADpB,oBADK,CAAN;AAIA,IALD,MAKO;AACNJ,iBAAaJ,gBAAgBI,UAAhB,CAAb;AACA;AACD,GATD,MASO;AACN,UAAOA,UAAP;AACA;AACD;;AAED,KAAID,IAAIO,aAAJ,CAAkBN,UAAlB,CAAJ,EAAmC;AAClC,SAAOA,UAAP;AACA,EAFD,MAEO,IAAIA,WAAWO,UAAX,CAAyBN,IAAzB,WAAqCD,eAAeC,IAAxD,EAA8D;AACpE,SAAOD,UAAP;AACA,EAFM,MAEA,IAAIA,WAAWO,UAAX,CAAsB,GAAtB,CAAJ,EAAgC;AACtC,SAAOP,WAAWQ,OAAX,CAAmB,GAAnB,QAA4BJ,SAA5B,CAAP;AACA,EAFM,MAEA;AACN,SAAOA,YAAYJ,UAAnB;AACA;AACD;;AAED;;;;;AAKO,SAASJ,eAAT,CAAyBI,UAAzB,EAAqC;AAC3C,KAAMI,YAAYP,aAAaG,UAAb,CAAlB;;AAEA,KAAII,aAAa,IAAjB,EAAuB;AACtB,MAAIJ,WAAWO,UAAX,CAAsB,GAAtB,CAAJ,EAAgC;AAC/B,UAAOP,WAAWQ,OAAX,OAAuBJ,SAAvB,EAAoC,GAApC,CAAP;AACA,GAFD,MAEO;AACN,UAAOJ,WAAWS,SAAX,CAAqBL,UAAUM,MAA/B,CAAP;AACA;AACD;;AAED,QAAOV,UAAP;AACA;;AAED;;;;;;AAMO,SAASH,YAAT,CAAsBG,UAAtB,EAAkC;AACxC,KAAMW,QAAQX,WAAWY,KAAX,CAAiB,GAAjB,CAAd;;AAEA,KAAID,MAAMD,MAAN,IAAgB,CAAhB,IAAqB,CAACC,MAAM,CAAN,EAASE,QAAT,CAAkB,GAAlB,CAA1B,EAAkD;AACjD,MAAIF,MAAM,CAAN,EAASJ,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AAC7B,UAAOI,MAAM,CAAN,EAASF,SAAT,CAAmB,CAAnB,IAAwB,GAA/B;AACA,GAFD,MAEO;AACN,UAAOE,MAAM,CAAN,IAAW,GAAlB;AACA;AACD;;AAED,QAAO,IAAP;AACA;;AAED;;;;;AAKO,SAASb,aAAT,QAA+B;AAAA,KAAPG,IAAO,SAAPA,IAAO;;AACrC,QAAOA,OAAO,GAAd;AACA","file":"namespace.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport * as mod from './modules';\n\n/**\n * Test if a module name is namespaced according to any root package.\n * @param {String} moduleName a module name\n * @return {Boolean} true if the module is namespaced\n */\nexport function isNamespaced(moduleName) {\n\treturn getNamespace(moduleName) != null;\n}\n\n/**\n * Namespace a module name according to some root package name. If the module\n * name is already namespaced with a different root package, an Error is thrown.\n * If the module is local it is left untouched.\n * @param {String} moduleName a module name\n * @param {String} name name of root package\n * @param {Boolean} allowOverride don't fail when trying to change the namespace\n * @return {String} the namespaced module name\n */\nexport function addNamespace(moduleName, {name}, {allowOverride = false} = {}) {\n\tconst moduleNamespace = getNamespace(moduleName);\n\tconst namespace = makeNamespace({name});\n\n\tif (moduleNamespace != null) {\n\t\tif (moduleNamespace !== namespace) {\n\t\t\tif (!allowOverride) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Current moduleName namespace (${moduleNamespace}) ` +\n\t\t\t\t\t\t` and given one (${namespace}) don't match`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmoduleName = removeNamespace(moduleName);\n\t\t\t}\n\t\t} else {\n\t\t\treturn moduleName;\n\t\t}\n\t}\n\n\tif (mod.isLocalModule(moduleName)) {\n\t\treturn moduleName;\n\t} else if (moduleName.startsWith(`${name}/`) || moduleName === name) {\n\t\treturn moduleName;\n\t} else if (moduleName.startsWith('@')) {\n\t\treturn moduleName.replace('@', `@${namespace}`);\n\t} else {\n\t\treturn namespace + moduleName;\n\t}\n}\n\n/**\n * Remove namespace from a module name if present, otherwise leave it untouched.\n * @param {String} moduleName a module name\n * @return {String} the un-namespaced module name\n */\nexport function removeNamespace(moduleName) {\n\tconst namespace = getNamespace(moduleName);\n\n\tif (namespace != null) {\n\t\tif (moduleName.startsWith('@')) {\n\t\t\treturn moduleName.replace(`@${namespace}`, '@');\n\t\t} else {\n\t\t\treturn moduleName.substring(namespace.length);\n\t\t}\n\t}\n\n\treturn moduleName;\n}\n\n/**\n * Returns the namespace of a given moduleName or null if module name is not\n * namespaced.\n * @param {String} moduleName a module name\n * @return {String} the namespace of the module name or null\n */\nexport function getNamespace(moduleName) {\n\tconst parts = moduleName.split('$');\n\n\tif (parts.length >= 2 && !parts[0].includes('/')) {\n\t\tif (parts[0].startsWith('@')) {\n\t\t\treturn parts[0].substring(1) + '$';\n\t\t} else {\n\t\t\treturn parts[0] + '$';\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Compose the namespace of a module according to some root package name.\n * @param {String} name name of root package\n * @return {String} the namespace for modules\n */\nexport function makeNamespace({name}) {\n\treturn name + '$';\n}\n"]}
{"version":3,"sources":["../src/pkg-desc.js"],"names":["PkgDesc","name","version","pkgPath","forceRoot","_name","_version","project","dir","asNative","_id","ROOT_ID","pkgPrjRelPath","relative","path","sep","_dir","FilePath","_clean","toString","isRoot","Error","clean","id"],"mappings":";;;;;;qjBAAA;;;;;;AAMA;;;;AAEA;;;;AACA;;;;;;;;AAEA;;;;IAIqBA,O;AACpB;;;;;;;;AAQA,kBAAYC,IAAZ,EAAkBC,OAAlB,EAA2BC,OAA3B,EAAuD;AAAA,MAAnBC,SAAmB,uEAAP,KAAO;;AAAA;;AACtD,OAAKC,KAAL,GAAaJ,IAAb;AACA,OAAKK,QAAL,GAAgBJ,OAAhB;;AAEA,MAAI,CAACC,OAAL,EAAc;AACbA,aAAUI,kBAAQC,GAAR,CAAYC,QAAtB;AACA,QAAKC,GAAL,GAAWV,QAAQW,OAAnB;AACA,GAHD,MAGO,IAAIP,SAAJ,EAAe;AACrB,QAAKM,GAAL,GAAWV,QAAQW,OAAnB;AACA,GAFM,MAEA;AACN,QAAKD,GAAL,GAAcT,IAAd,SAAsBC,OAAtB;AACA;;AAED,MAAIU,gBAAgBL,kBAAQC,GAAR,CAAYK,QAAZ,CAAqBV,OAArB,EAA8BM,QAAlD;;AAEA;AACA;AACAG,kBACCA,kBAAkB,EAAlB,GAAuB,GAAvB,SAAiCE,eAAKC,GAAtC,GAA4CH,aAD7C;;AAGA,OAAKI,IAAL,GAAY,IAAIC,kBAAJ,CAAaL,aAAb,CAAZ;;AAEA,OAAKM,MAAL,GAAc,IAAd;AACA;;AAED;;;;;;;;;0BAKkB;AAAA,kFAAJ,EAAI;AAAA,OAAXV,GAAW,QAAXA,GAAW;;AACjB,UAAO,IAAIR,OAAJ,CACN,KAAKC,IADC,EAEN,KAAKC,OAFC,EAGNM,MAAMA,IAAIW,QAAJ,EAAN,GAAuB,KAAKH,IAAL,CAAUG,QAAV,EAHjB,EAIN,KAAKC,MAJC,CAAP;AAMA;;AAED;;;;;;;;sBAKU;AACT,UAAO,KAAKJ,IAAZ;AACA,G;oBAEOR,G,EAAK;AACZ,SAAM,IAAIa,KAAJ,CAAU,4BAAV,CAAN;AACA;;;sBAEW;AACX,UAAO,KAAKH,MAAZ;AACA,G;oBAESI,K,EAAO;AAChB,QAAKJ,MAAL,GAAcI,KAAd;AACA;;;sBAEQ;AACR,UAAO,KAAKZ,GAAZ;AACA,G;oBAEMa,E,EAAI;AACV,SAAM,IAAIF,KAAJ,CAAU,2BAAV,CAAN;AACA;;;sBAEU;AACV,UAAO,KAAKhB,KAAZ;AACA,G;oBAEQJ,I,EAAM;AACd,SAAM,IAAIoB,KAAJ,CAAU,6BAAV,CAAN;AACA;;;sBAEa;AACb,UAAO,KAAKf,QAAZ;AACA,G;oBAEWJ,O,EAAS;AACpB,SAAM,IAAImB,KAAJ,CAAU,gCAAV,CAAN;AACA;;AAED;;;;;;;sBAIa;AACZ,UAAO,KAAKE,EAAL,IAAWvB,QAAQW,OAA1B;AACA;;;;;;kBAnGmBX,O;;;AAsGrBA,QAAQW,OAAR,GAAkB,GAAlB","file":"pkg-desc.js","sourcesContent":["/**\n * Â© 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport path from 'path';\n\nimport FilePath from './file-path';\nimport project from './project';\n\n/**\n * A package descriptor class to identify directories containing packages.\n * @type {PkgDesc}\n */\nexport default class PkgDesc {\n\t/**\n\t * Constructor\n\t * @param {String} name name of package\n\t * @param {String} version version number\n\t * @param {String} pkgPath directory where package lives (or null if it is\n\t * \t\t\t\t\t\tthe root package)\n\t * @param {Boolean} forceRoot create a root package even if dir is not null\n\t */\n\tconstructor(name, version, pkgPath, forceRoot = false) {\n\t\tthis._name = name;\n\t\tthis._version = version;\n\n\t\tif (!pkgPath) {\n\t\t\tpkgPath = project.dir.asNative;\n\t\t\tthis._id = PkgDesc.ROOT_ID;\n\t\t} else if (forceRoot) {\n\t\t\tthis._id = PkgDesc.ROOT_ID;\n\t\t} else {\n\t\t\tthis._id = `${name}@${version}`;\n\t\t}\n\n\t\tlet pkgPrjRelPath = project.dir.relative(pkgPath).asNative;\n\n\t\t// Because path.join('.', 'x') returns 'x', not './x' we need to prepend\n\t\t// './' by hand :-(\n\t\tpkgPrjRelPath =\n\t\t\tpkgPrjRelPath === '' ? '.' : `.${path.sep}${pkgPrjRelPath}`;\n\n\t\tthis._dir = new FilePath(pkgPrjRelPath);\n\n\t\tthis._clean = true;\n\t}\n\n\t/**\n\t * Clone this object and optionally modify some of its fields.\n\t * @param {FilePath|string} dir override package directory path or FilePath\n\t * @return {PkgDesc} a clone of this (perhaps modified) package descriptor\n\t */\n\tclone({dir} = {}) {\n\t\treturn new PkgDesc(\n\t\t\tthis.name,\n\t\t\tthis.version,\n\t\t\tdir ? dir.toString() : this._dir.toString(),\n\t\t\tthis.isRoot\n\t\t);\n\t}\n\n\t/**\n\t * Get directory where package lives referenced to `project.dir`. Note that\n\t * it always start with `./` so that it can be used in `path.join()` calls.\n\t * @return {FilePath}\n\t */\n\tget dir() {\n\t\treturn this._dir;\n\t}\n\n\tset dir(dir) {\n\t\tthrow new Error('Package dirs are read-only');\n\t}\n\n\tget clean() {\n\t\treturn this._clean;\n\t}\n\n\tset clean(clean) {\n\t\tthis._clean = clean;\n\t}\n\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tset id(id) {\n\t\tthrow new Error('Package ids are read-only');\n\t}\n\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tset name(name) {\n\t\tthrow new Error('Package names are read-only');\n\t}\n\n\tget version() {\n\t\treturn this._version;\n\t}\n\n\tset version(version) {\n\t\tthrow new Error('Package versions are read-only');\n\t}\n\n\t/**\n\t * Test if package is the root package.\n\t * @return {Boolean} true if this is the root package\n\t */\n\tget isRoot() {\n\t\treturn this.id == PkgDesc.ROOT_ID;\n\t}\n}\n\nPkgDesc.ROOT_ID = '/';\n"]}
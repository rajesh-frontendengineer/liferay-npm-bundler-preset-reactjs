'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.get = get;
exports.set = set;
exports.clear = clear;

var _path = require('path');

global._babel_ipc_ = global._babel_ipc_ || {};

/**
 * Get an IPC value for a given Babel plugin
 * @param  {Object} state babel plugin state argument
 * @param  {Object|function} defaultValue the default value or a factory to get it if value is not set
 * @return {Object} the IPC value
 */
/**
 * Â© 2017 Liferay, Inc. <https://liferay.com>
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

function get(state, defaultValue) {
	var defaultValueFactory = defaultValue;

	if (typeof defaultValue !== 'function') {
		defaultValueFactory = function defaultValueFactory() {
			return defaultValue;
		};
	}

	if (!state || !state.file || !state.file.opts || !state.file.opts.filenameRelative) {
		return defaultValueFactory();
	}

	var key = (0, _path.resolve)(state.file.opts.filenameRelative);

	if (!global._babel_ipc_.hasOwnProperty(key)) {
		return defaultValueFactory();
	}

	return global._babel_ipc_[key];
}

/**
 * Set an IPC value for a given file path.
 * @param  {String} filePath the path of the file being processed
 * @param  {Object} value the IPC value to set
 * @return {void}
 */
function set(filePath, value) {
	global._babel_ipc_[(0, _path.resolve)(filePath)] = value;
}

/**
 * Clear an IPC value for a given file path.
 * @param  {String} filePath the path of the file being processed
 * @return {void}
 */
function clear(filePath) {
	delete global._babel_ipc_[(0, _path.resolve)(filePath)];
}
//# sourceMappingURL=babel-ipc.js.map
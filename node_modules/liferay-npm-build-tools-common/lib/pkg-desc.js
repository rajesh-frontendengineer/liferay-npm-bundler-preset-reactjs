'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _filePath = require('./file-path');

var _filePath2 = _interopRequireDefault(_filePath);

var _project = require('./project');

var _project2 = _interopRequireDefault(_project);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A package descriptor class to identify directories containing packages.
 * @type {PkgDesc}
 */
var PkgDesc = function () {
	/**
  * Constructor
  * @param {String} name name of package
  * @param {String} version version number
  * @param {String} pkgPath directory where package lives (or null if it is
  * 						the root package)
  * @param {Boolean} forceRoot create a root package even if dir is not null
  */
	function PkgDesc(name, version, pkgPath) {
		var forceRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

		_classCallCheck(this, PkgDesc);

		this._name = name;
		this._version = version;

		if (!pkgPath) {
			pkgPath = _project2.default.dir.asNative;
			this._id = PkgDesc.ROOT_ID;
		} else if (forceRoot) {
			this._id = PkgDesc.ROOT_ID;
		} else {
			this._id = name + '@' + version;
		}

		var pkgPrjRelPath = _project2.default.dir.relative(pkgPath).asNative;

		// Because path.join('.', 'x') returns 'x', not './x' we need to prepend
		// './' by hand :-(
		pkgPrjRelPath = pkgPrjRelPath === '' ? '.' : '.' + _path2.default.sep + pkgPrjRelPath;

		this._dir = new _filePath2.default(pkgPrjRelPath);

		this._clean = true;
	}

	/**
  * Clone this object and optionally modify some of its fields.
  * @param {FilePath|string} dir override package directory path or FilePath
  * @return {PkgDesc} a clone of this (perhaps modified) package descriptor
  */


	_createClass(PkgDesc, [{
		key: 'clone',
		value: function clone() {
			var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
			    dir = _ref.dir;

			return new PkgDesc(this.name, this.version, dir ? dir.toString() : this._dir.toString(), this.isRoot);
		}

		/**
   * Get directory where package lives referenced to `project.dir`. Note that
   * it always start with `./` so that it can be used in `path.join()` calls.
   * @return {FilePath}
   */

	}, {
		key: 'dir',
		get: function get() {
			return this._dir;
		},
		set: function set(dir) {
			throw new Error('Package dirs are read-only');
		}
	}, {
		key: 'clean',
		get: function get() {
			return this._clean;
		},
		set: function set(clean) {
			this._clean = clean;
		}
	}, {
		key: 'id',
		get: function get() {
			return this._id;
		},
		set: function set(id) {
			throw new Error('Package ids are read-only');
		}
	}, {
		key: 'name',
		get: function get() {
			return this._name;
		},
		set: function set(name) {
			throw new Error('Package names are read-only');
		}
	}, {
		key: 'version',
		get: function get() {
			return this._version;
		},
		set: function set(version) {
			throw new Error('Package versions are read-only');
		}

		/**
   * Test if package is the root package.
   * @return {Boolean} true if this is the root package
   */

	}, {
		key: 'isRoot',
		get: function get() {
			return this.id == PkgDesc.ROOT_ID;
		}
	}]);

	return PkgDesc;
}();

exports.default = PkgDesc;


PkgDesc.ROOT_ID = '/';
//# sourceMappingURL=pkg-desc.js.map
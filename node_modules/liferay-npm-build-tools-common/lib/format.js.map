{"version":3,"sources":["../src/format.js"],"names":["error","info","print","success","question","title","warn","lrFormatOpts","process","env","split","opts","noColors","indexOf","noDecorations","verbatim","args","join","fmt","bold","chalk","hex","underline","literals","values","format","lines","Array","isArray","map","line","removeJsFormatWhitespace","replace","console","log","emoji","ret","i","length"],"mappings":"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","file":"format.js","sourcesContent":["/**\n * © 2017 Liferay, Inc. <https://liferay.com>\n *\n * SPDX-License-Identifier: LGPL-3.0-or-later\n */\n\nimport chalk from 'chalk';\n\n/**\n * Formatting options may be added by setting the `LR_FORMAT_OPTS` environment\n * variable. It is supposed to be a comma separated list of options.\n *\n * Valid options are:\n *\n *   * `no-colors`: don't use colors for texts\n *   * `no-decorations`: don't use font decorations or emojis\n *\n */\nconst lrFormatOpts = (process.env['LR_FORMAT_OPTS'] || '').split(',');\nconst opts = {\n\tnoColors: lrFormatOpts.indexOf('no-colors') != -1,\n\tnoDecorations: lrFormatOpts.indexOf('no-decorations') != -1,\n};\n\nconst verbatim = (...args) => args.join(' ');\nconst fmt = {\n\tbold: opts.noDecorations ? verbatim : chalk.bold,\n\terror: opts.noColors ? verbatim : chalk.hex('#F44'),\n\tinfo: opts.noColors ? verbatim : chalk.hex('#888'),\n\tquestion: opts.noColors ? verbatim : chalk.hex('#55F'),\n\tsuccess: opts.noColors ? verbatim : chalk.hex('#0A0'),\n\ttitle: opts.noColors ? verbatim : chalk.bold.hex('#55F'),\n\tunderline: opts.noDecorations ? verbatim : chalk.underline,\n\twarn: opts.noColors ? verbatim : chalk.hex('#CA0'),\n};\n\nexport function error(literals, ...values) {\n\treturn fmt.error(format('❌', literals, values));\n}\n\nexport function info(literals, ...values) {\n\treturn fmt.info(format('ℹ️', literals, values));\n}\n\n/**\n * Print an array of lines separating them with CRs or a single line.\n *\n * It takes care of removing:\n *\n *   * Words inside `||` if `no-decorations` option is set\n *\n * And also decorates (unless `no-decorations` is provided):\n *\n *   * URLs starting with `http(s)://` with underline\n *   * Words inside `{}` with bold\n *\n * Each passed line is processed by the `removeJsFormatWhitespace` function.\n *\n * @param {Array|string} lines\n */\nexport function print(lines) {\n\tif (!Array.isArray(lines)) {\n\t\tlines = [lines];\n\t}\n\n\tlines = lines.map(line => {\n\t\tline = removeJsFormatWhitespace(line);\n\n\t\tline = line.replace(/(https?:\\/\\/[^\\s]+)/gm, fmt.underline('$1'));\n\t\tline = line.replace(/{([^}]*)}/gm, fmt.bold('$1'));\n\t\tline = line.replace(/\\|([^|]*)\\|/g, opts.noDecorations ? '' : '$1');\n\n\t\treturn line;\n\t});\n\n\tconsole.log(lines.join('\\n'));\n}\n\nexport function success(literals, ...values) {\n\treturn fmt.success(format('✔️', literals, values));\n}\n\nexport function question(literals, ...values) {\n\treturn fmt.question(format('❓', literals, values));\n}\n\nexport function title(literals, ...values) {\n\treturn fmt.title(format('', literals, values));\n}\n\nexport function warn(literals, ...values) {\n\treturn fmt.warn(format('⚠️', literals, values));\n}\n\n/**\n * This is an ES6 template unrolling function that optionally prefixes the final\n * string with an emoji.\n *\n * The emoji is treated as a decoration and thus removed if the `no-decorations`\n * option is set.\n *\n * The resulting string is processed by the `removeJsFormatWhitespace` function.\n *\n * @param {string} emoji an emoji or an empty string to prefix the text\n * @param {Array<string>} literals\n * @param  {...any} values\n */\nfunction format(emoji, literals, ...values) {\n\tlet ret = literals[0];\n\n\tfor (let i = 0; i < values.length; i++) {\n\t\tret += values[i];\n\n\t\tif (i + 1 < literals.length) {\n\t\t\tret += literals[i + 1];\n\t\t}\n\t}\n\n\tret = removeJsFormatWhitespace(ret);\n\tret = (emoji ? `|${emoji} |` : '') + ret;\n\n\treturn ret;\n}\n\n/**\n * This function removes:\n *\n *   * A leading CR in the first line if it exists\n *   * Two tabs at the begining of each line\n *\n * This is to enhance legibility of JS code when it is formatted according to\n * the project's rules.\n *\n * This function is (and must always be) idempotent because it may need to be\n * applied several times to the same line.\n * @param {string} line\n */\nfunction removeJsFormatWhitespace(line) {\n\tline = line.replace(/^\\n/, '');\n\tline = line.replace(/^\\t\\t/gm, '');\n\n\treturn line;\n}\n"]}
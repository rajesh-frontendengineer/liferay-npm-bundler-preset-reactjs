'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
Â© 2017 Liferay, Inc. <https://liferay.com>

icense-Identifier: LGPL-3.0-or-later


var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _filePath = require('./file-path');

var _filePath2 = _interopRequireDefault(_filePath);

var _project = require('./project');

var _project2 = _interopRequireDefault(_project);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A class to hold information about processed modules and optionally dump/read
 * it to/from disk.
 * @type {Manifest}
 */
var Manifest = function () {
	/**
  * Constructor
  * @param {String} filePath an optional path to a file to load initial status
  */
	function Manifest() {
		var filePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		_classCallCheck(this, Manifest);

		this._loadedFromFile = false;

		if (filePath) {
			this._filePath = filePath;

			try {
				this._data = JSON.parse(_fsExtra2.default.readFileSync(filePath));
				this._loadedFromFile = true;
				return;
			} catch (err) {
				if (err.code !== 'ENOENT') {
					throw err;
				}
			}
		}

		this._data = {
			packages: {}
		};
	}

	/**
  * Set to true when the manifest has been loaded from a file.
  */


	_createClass(Manifest, [{
		key: 'addPackage',


		/**
   * Add a processed package entry
   * @param {PkgDesc} srcPkg the source package descriptor
   * @param {PkgDesc} destPkg the destination package descriptor
   */
		value: function addPackage(srcPkg, destPkg) {
			var pkg = this._data.packages[srcPkg.id] || {};

			pkg.src = {
				id: srcPkg.id,
				name: srcPkg.name,
				version: srcPkg.version,
				dir: srcPkg.dir.asPosix
			};
			pkg.dest = {
				id: destPkg.id,
				name: destPkg.name,
				version: destPkg.version,
				dir: destPkg.dir.asPosix
			};

			this._data.packages[srcPkg.id] = pkg;
		}

		/**
   *
   * @param {string} pkgId
   * @param {string} moduleName
   * @param {object} flags
   */

	}, {
		key: 'addModuleFlags',
		value: function addModuleFlags(pkgId, moduleName, flags) {
			var pkg = this._data.packages[pkgId] || {};

			pkg.modules = pkg.modules || {};
			pkg.modules[moduleName] = pkg.modules[moduleName] || {};
			pkg.modules[moduleName]['flags'] = Object.assign(pkg.modules[moduleName]['flags'] || {}, flags);

			this._data.packages[pkgId] = pkg;
		}

		/**
   * Get a processed package entry
   * @param {PkgDesc} srcPkg the source package descriptor
   * @return {Object} the processed package entry (see addPackage for format description)
   */

	}, {
		key: 'getPackage',
		value: function getPackage(srcPkg) {
			return this._data.packages[srcPkg.id];
		}

		/**
   * Tests whether a package must be regenerated
   * @param {PkgDesc} destPkg destination package
   * @return {Boolean} true if package is outdated
   */

	}, {
		key: 'isOutdated',
		value: function isOutdated(destPkg) {
			// Unless we use real timestamps or digests, we cannot detect reliably
			// if the root package is outdated or up-to-date.
			if (destPkg.isRoot) {
				return true;
			}

			var entry = this._data.packages[destPkg.id];

			if (entry === undefined) {
				return true;
			}

			if (!_fsExtra2.default.existsSync(_project2.default.dir.join(new _filePath2.default(entry.dest.dir, { posix: true })).asNative)) {
				return true;
			}

			return false;
		}

		/**
   * Save current manifest to a file
   * @param  {String} filePath path to file or null to use default path
   * @return {void}
   */

	}, {
		key: 'save',
		value: function save() {
			var filePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

			filePath = filePath || this._filePath;

			if (filePath === undefined) {
				throw new Error('No file path given and no default path set');
			}

			_fsExtra2.default.ensureDirSync(_path2.default.dirname(filePath));
			_fsExtra2.default.writeFileSync(filePath, this.toJSON());
		}

		/**
   * Return the JSON serialization of this manifest
   * @return {String}
   */

	}, {
		key: 'toJSON',
		value: function toJSON() {
			return JSON.stringify(this._data, null, 2);
		}
	}, {
		key: 'loadedFromFile',
		get: function get() {
			return this._loadedFromFile;
		}
	}]);

	return Manifest;
}();

exports.default = Manifest;
//# sourceMappingURL=manifest.js.map